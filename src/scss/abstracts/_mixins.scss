// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @since 0.1
/// @access public
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector.
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @since 0.1
/// @access public
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// Offset Position mixin
/// @since 0.1
/// @access public
/// @param {String} $position - Either `relative`, `absolute` or `fixed`
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

/// Shorthand mixin for absolute positioning
/// Serves as an alias for `position(absolute, ...)`
/// @since 0.1
/// @access public
/// @param {Arglist} $args - Offsets
/// @alias {Mixin} position
/// @require {mixin} position
@mixin absolute($args...) {
  @include position(absolute, $args...);
}

/// Shorthand mixin for relative positioning
/// Serves as an alias for `position(relative, ...)`
/// @since 0.1
/// @access public
/// @param {Arglist} $args - Offsets
/// @alias {Mixin} position
/// @require {mixin} position
@mixin relative($args...) {
  @include position(relative, $args...);
}

/// Shorthand mixin for fixed positioning
/// Serves as an alias for `position(fixed, ...)`
/// @since 0.1
/// @access public
/// @param {Arglist} $args - Offsets
// /@alias {Mixin} position
/// @require {mixin} position
@mixin fixed($args...) {
  @include position(fixed, $args...);
}

/// Centering mixin - horizontally, vertically or both
/// @since 0.1
/// @access public
/// @param {Bool} $horizontal - Center horizontally
/// @param {Bool} $vertical - Center vertically
@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else  if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

/// Covering mixin
/// @since 0.1
/// @access public
@mixin coverer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

/// Clearfix mixin
/// @since 0.1
/// @access public
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/// BEM Mixin for block elements
/// @since 0.1
/// @access public
@mixin element($element) {
  &__#{$element} {
    @content;
  }
}

/// BEM Mixin for block modifiers
/// @since 0.1
/// @access public
@mixin modifier($modifier) {
  &--#{$modifier} {
    @content;
  }
}

/// Mixin to manage single breakpoints
/// @author Hugo Giraudel
/// @since 0.1
/// @access public
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin breakpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
  
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`." + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/// Mixin to manage multiple breakpoints
/// @author Shawn Grundy
/// @since 0.1
/// @access public
/// @param {String} $bp1 - First breakpoint
/// @param {String} $bp2 - Second breakpoint
/// @require $breakpoints
/// @todo Work out a way to deal with a dynamic amount of breakpoints
@mixin multi-breakpoints($bp1, $bp2) {
  @if map-has-key($breakpoints, $bp2) and map-has-key($breakpoints, $bp2) {
    @media #{inspect(map-get($breakpoints, $bp1))} and #{inspect(map-get($breakpoints, $bp2))} {
      @content;
    }
  }
  
  @else {
    @warn "Unfortunately, no value could be retrieved from either `#{$bp1}` or `#{$bp2}`." + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/// Box reset mixin
/// @since 0.1
/// @access public
@mixin box-reset {
  width: 100%;
  overflow: hidden;
  position: relative;
}

/// List reset mixin
/// @since 0.1
/// @access public
@mixin list-reset {
  list-style: none;
  margin: 0;
  padding: 0;
}

/// Make image responsive
/// @since 0.1
/// @access public
/// @param {Bool} $force-width [false] - Whether or not to force the width
@mixin imgr($force-width: false) {
  display: block;
  height: auto;
  @if ($force-width) {
    width: 100%;
  } @else {
    max-width: 100%;
  }
}

/// Vertical align
/// @since 0.1
/// @access public
/// @param {String} $display [inline-block] - The Display value
/// @param {String} $align [baseline] - The vertical align value
@mixin vertical-align($display: inline-block, $align: baseline) {
  display: $display;
  vertical-align: $align;
}

/// Vertical align for child within parent element
/// @since 0.1
/// @access public
/// @param {String} $child-class - The class of the child element
/// @param {String} $align [middle] - Vertical align value
/// @require {mixin} rem
@mixin nested-vertical-align($child-class, $align: middle) {
  white-space: nowrap;
  
  .#{$child-class) {
    display: inline-block;
    white-space: normal;
    vertical-align: $align;
  }
  
  &:before {
    content: '';
    vertical-align: $align;
    display: inline-block;
    overflow: hidden;
    @include rem((
      width: 1px,
      margin: 0 0 0 -5px
    ));
  }
}

/// Retina image handler (I hate it too!)
/// @since 0.1
/// @access public
/// @param {String} $image - The filename of the image
/// @param {String} $ext - The extension of the image (e.g. `png`)
/// @param {Length} $width [100%] - The width of the image
/// @param {Length} $height [auto] - The height of the image
@mixin retina-image($image, $ext, $width: 100%, $height: auto) {
  background-image: url('../img/' + $image + '.' + $ext);
  background-repeat: no-repeat;
  width: $width;
  height: $height;
  
  @media (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    background-image: url('../img/' + $image + '@2x' + '.' + $ext);
    background-size: $width $height;
  }
}

/// Triangle helper
/// @since 0.1
/// @accss public
/// @param {Direction} $direction - Triangle direction, `top`, `right`, `bottom`, or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size
/// @require {Function} opposite-direction
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be `top`, `right`, `bottom` or `left`.";
  }
  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-direction($direction)}: ($size * 1.5) solid $color;
  
  $perpendicular-borders: $size solid transparent;
  
  @if $direction == top or $direction == bottom {
    border-left: $perpendicular-borders;
    border-right: $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top: $perpendicular-borders;
  }
}
